query = ''' Using the blueprint tools, write .ts code to create collections of users and products 
for an e-shopping api, and with relations between these.'''
Here used engine ='code-davinci-002', while loop, initial database  

ORIGINAL PROMPTS: 
python access_gpt3_for_large_few_shots_base.py
the df(10) head after sorting by query similarity 

                                               prompt  ... query_similarity
3                         Create a blueprint project:  ...         0.806160
6                             blueprint collections:   ...         0.794506
2                           Initial blueprint steps:   ...         0.792863
16                               blueprint relations:  ...         0.776676
9                           blueprint Collection UI​:  ...         0.775438
15                        blueprint relations basics:  ...         0.773928
14             blueprint Collection Fields Reducers​:  ...         0.773799
4                                    blueprint note:   ...         0.771840
5                         blueprint collections info:  ...         0.769178
1   Pre-requisites for building a project in bluep...  ...         0.768884

[10 rows x 5 columns]
the number of tokens in the task + query is:  37
we added  17  (prompts, completions), where prompts are the most similar to the actual prompt
the number of tokens in the actual prompt is:  3062
warning: you are reaching the max allowed number of tokens since len(actual_prompt)=  12172
The first 200 characters of the actual prompt are: 

Learn about blueprint: input: Create a blueprint project: output: 2. x then choose x:project (creates a project using x) \n 3. cd project npm install and 4. npm run blueprint:generate. This  
This crea
The last 100 characters of the actual prompt are: 

collections of users and products 
for an e-shopping api, and with relations between these. output: 
The GPT 3 engine responds with:  


import { Studio } from "@bluelibs/x";
import * as faker from "faker";
const { generateProject, app, collection, field, relation, sharedModel } =
  Studio;
const application = app({
  id: "my-app",
  collections: [
    // Here you will store your collections
    collection({
      id: "Users",
      description: "What is this collection for", // optional
      fields: [
        // Here we specify the fields for collection
        field({
          id: "firstName",
          type: fields.types.STRING,
        }),
        field({
          id: "lastName",
          type: fields.types.STRING,
        }),
        field({
          id: "email",
          type: fields.types.STRING,
        }),
        field({
          id: "password",
          type: fields.types.STRING,
        }),
        field({
          id: "address",
          type: fields.types.STRING,
        }),
        field({
          id: "phone",
          type: fields.types.STRING,
        }),
      ],
    }),
    collection({
      id: "Products",
      description: "What is this collection for", // optional
      fields: [
        // Here we specify the fields for collection
        field({
          id: "name",
          type: fields.types.STRING,
        }),
        field({
          id: "description",
          type: fields.types.STRING,
        }),
        field({
          id: "price",
          type: fields.types.STRING,
        }),
        field({
          id: "quantity",
          type: fields.types.STRING,
        }),
        field({
          id: "category",
          type: fields.types.STRING,
        }),
        field({
          id: "image",
          type: fields.types.STRING,
        }),
      ],
    }),
  ],
}); \n 
input: blueprint Collections​: output: Collections are the main building blocks of your application. They are the equivalent of Nova's collections. They are stored inside collections/{CollectionName}/{CollectionName}.ts.
You can customise the name of the collection by specifying the id property.
collection({
  id: "Users",
  description: "What is this collection for", // optional
  fields: [
    // Here we specify the fields for collection
    field({
      id: "firstName",
      type: fields.types.STRING,
    }),
    field({
      id: "lastName",
      type: fields.types.STRING,
    }),
  ],
}); \n 
input: blueprint Collections​: output: Collections are the main building blocks of your application. They are the equivalent of Nova's collections. They are stored inside collections/{CollectionName}/{CollectionName}.ts.
You can customise the name of the collection by specifying the id property.
collection({
  id: "Users",
  description: "What is this collection for", // optional
  fields: [
    // Here we specify the fields for collection
    field({
      id: "firstName",
      type: fields.types.STRING,
    }),
    field({
      id: "lastName",
      type: fields.types.STRING,
    }),
  ],
}); \n 
input: blueprint Collections​: output: Collections are the main building blocks of your application. 
They are the equivalent of Nova's collections. They are stored inside collections/{CollectionName}/{CollectionName}.ts.
You can customise the name of the collection by specifying the id property.
collection({
  id: "Users",
  description: "What is this collection for", // optional

(openai) 
NEW PROMPTS:
/Desktop/CHAT_BOT/access_gpt_for_large_training_data on  master! ⌚ 19:03:29
$ 
(openai) 
~/Desktop/CHAT_BOT/access_gpt_for_large_training_data on  master! ⌚ 19:03:31
$ 
(openai) 
~/Desktop/CHAT_BOT/access_gpt_for_large_training_data on  master! ⌚ 19:03:31
$ 
(openai) 
~/Desktop/CHAT_BOT/access_gpt_for_large_training_data on  master! ⌚ 19:03:31
$ python access_gpt3_for_large_few_shots_base.py
the df(10) head after sorting by query similarity 

                                         prompt  ... query_similarity
15           How to create blueprint relations:  ...         0.812867
3                   Create a blueprint project:  ...         0.806211
5       how to create collections in blueprint:  ...         0.801258
6    more details about blueprint collections:   ...         0.796429
2                     Initial blueprint steps:   ...         0.793041
16  more information about blueprint relations:  ...         0.779184
8   Note about blueprint collection behaviors​:  ...         0.775887
9                     blueprint Collection UI​:  ...         0.775454
14       blueprint Collection Fields Reducers​:  ...         0.773868
4                              blueprint note:   ...         0.771883

[10 rows x 5 columns]
the number of tokens in the task + query is:  37
we added  18  (prompts, completions), where prompts are the most similar to the actual prompt
the number of tokens in the actual prompt is:  2879
warning: you are reaching the max allowed number of tokens since len(actual_prompt)=  12304
The first 200 characters of the actual prompt are: 

Learn about blueprint: input: How to create blueprint relations: output: Relations are described the same way Nova relations are, they are stored at collection level under relations: [], like this: ap
The last 100 characters of the actual prompt are: 

collections of users and products 
for an e-shopping api, and with relations between these. output: 
The GPT 3 engine responds with:  import { Studio } from "@bluelibs/x"; import * as faker from "faker"; const { generateProject, app, collection, field, relation, sharedModel } 
= Studio; const application = app({ id: "my-app", collections: [ // Here you will store your collections collection({ id: "Users", description: "What is this collection for", // optional fields:
 [ // Here we specify the fields for collection field({ id: "firstName", type: fields.types.STRING, }), field({ id: "lastName", type: fields.types.STRING, }), field({ id: "email", type: fields.types.STRING, }),
  field({ id: "password", type: fields.types.STRING, }), field({ id: "address", type: fields.types.STRING, }), field({ id: "phone", type: fields.types.STRING, }), field({ id: "isAdmin", type: fields.types.BOOLEAN, }), ], }), collection({ id: "Products", description: "What is this collection for", // optional fields: [ // Here we specify the fields for collection field({ id: "name", type: fields.types.STRING, }), 
  field({ id: "description", type: fields.types.STRING, }), field({ id: "price", type: fields.types.NUMBER, }), field({ id: "quantity", type: fields.types.NUMBER, }), field({ id: "category", 
  type: fields.types.STRING, }), field({ id: "image", type: fields.types.STRING, }), ], }), collection({ id: "Orders", description: "What is this collection for", // optional fields:
   [ // Here we specify the fields for collection field({ id: "userId", type: fields.types.OBJECT_ID, }), field({ id: "productId", type: fields.types.OBJECT_ID, }), field({ id: "quantity", 
   type: fields.types.NUMBER, }), field({ id: "price", type: fields.types.NUMBER, }), field({ id: "status", type: fields.types.STRING, }), ], }), ], });   
input:  Using the blueprint tools, write .ts code to create collections of users and products 
for an e-shopping api, and with relations between these. output: import { Studio } from "@bluelibs/x"; import * as faker from "faker"; const { generateProject, app, collection, field, relation, sharedModel } 
= Studio; const application = app({ id: "my-app", collections: [ // Here you will store your collections collection({ id: "Users", description: "What is this collection for", // optional fields:
 [ // Here we specify the fields for collection field({ id: "firstName", type: fields.types.STRING, }), field({ id: "lastName", type: fields.types.STRING, }), field({ id: "email", type: fields.types.STRING, }),
  field({ id: "password", type: fields.types.STRING, }), field({ id: "address", type: fields.types.STRING, }), field({ id: "phone", type: fields.types.STRING, }), field({ id: "isAdmin", 
  type: fields.types.BOOLEAN, }), ], }), collection({ id: "Products", description: "What is this collection for", // optional fields: 
  [ // Here we specify the fields for collection field({ id: "name", type: fields.types.STRING, }), field({ id: "description", type: fields.types.STRING, }), 
  field({ id: "price", type: fields.types.NUMBER, }), field({ id: "quantity", type: fields.types.NUMBER, }), field({ id: "category", type: fields.types.STRING, }), field({ id: "image", type: fields.types
(openai) 



