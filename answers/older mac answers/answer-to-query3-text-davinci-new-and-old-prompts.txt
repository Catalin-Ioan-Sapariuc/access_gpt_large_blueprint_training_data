query = ''' Using the blueprint tools, write .ts code to create collections of users and products 
for an e-shopping api, and with relations between these.'''
Here used engine ='text-davinci-003', while loop, new database (some prompts changed) . 
ORIGINAL  PROMPTS: 
$ python access_gpt3_for_large_few_shots_base.py
the df(10) head after sorting by query similarity 

                                               prompt  ... query_similarity
3                         Create a blueprint project:  ...         0.806160
6                             blueprint collections:   ...         0.794506
2                           Initial blueprint steps:   ...         0.792863
16                               blueprint relations:  ...         0.776676
9                           blueprint Collection UI​:  ...         0.775438
15                        blueprint relations basics:  ...         0.773928
14             blueprint Collection Fields Reducers​:  ...         0.773799
4                                    blueprint note:   ...         0.771840
5                         blueprint collections info:  ...         0.769178
1   Pre-requisites for building a project in bluep...  ...         0.768884

[10 rows x 5 columns]
the number of tokens in the task + query is:  37
we added  17  (prompts, completions), where prompts are the most similar to the actual prompt
the number of tokens in the actual prompt is:  3062
warning: you are reaching the max allowed number of tokens since len(actual_prompt)=  12172
The first 200 characters of the actual prompt are: 

Learn about blueprint: input: Create a blueprint project: output: 2. x then choose x:project (creates a project using x) \n 3. cd project npm install and 4. npm run blueprint:generate. This  This crea
The last 100 characters of the actual prompt are: 

collections of users and products 
for an e-shopping api, and with relations between these. output: 
The GPT 3 engine responds with:  

import { Studio } from "@bluelibs/x";
import * as faker from "faker";
const { generateProject, app, collection, field, relation, sharedModel } =
  Studio;
const application = app({
  id: "my-app",
  collections: [
    // Here you will store your collections
    collection({
      id: "Users",
      description: "Collection of users for the e-shopping api",
      fields: [
        // Here we specify the fields for collection
        field({
          id: "name",
          type: fields.types.STRING,
        }),
        field({
          id: "email",
          type: fields.types.STRING,
        }),
        field({
          id: "password",
          type: fields.types.STRING,
        }),
      ],
    }),
    collection({
      id: "Products",
      description: "Collection of products for the e-shopping api",
      fields: [
        // Here we specify the fields for collection
        field({
          id: "name",
          type: fields.types.STRING,
        }),
        field({
          id: "price",
          type: fields.types.NUMBER,
        }),
        field({
          id: "description",
          type: fields.types.STRING,
        }),
        field({
          id: "image",
          type: fields.types.STRING,
        }),
        field({
          id: "userId",
          type: fields.types.OBJECT_ID,
        }),
      ],
      relations: [
        relation({
          id: "user",
          to: "Users",
          isRequired: true,
        }),
      ],
    }),
  ],
});
(openai) 
~/Desktop/CHAT_BOT/access_gpt_for_large_training_data on  master! ⌚ 18:52:03
$ 



