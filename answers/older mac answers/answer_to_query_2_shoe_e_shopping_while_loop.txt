query = '''Using the blueprint tools, write steps to create a shoe e-shopping api, 
with collections of users, products, shopping events and users balance, 
and with relations between these.'''

(openaiapi) PS C:\Users\catalin\Desktop\CHAT_BOT\access_gpt_for_large_training_data> python .\access_gpt3_for_large_few_shots_base.py
the df(5) head after sorting by query similarity 

                                               prompt                                         completion  ... prompt_and_completion_tokens  query_similarity
2                           Initial blueprint steps:   1. npm i -g i -g bluelibs/x (installs the x fr...  ...                           29          0.846933
3                         Create a blueprint project:  2. x then choose x:project (creates a project ...  ...                          180          0.833336
6                             blueprint collections:   // This is what triggers the generation of the...  ...                          171          0.817773
15                        blueprint relations basics:  Relations are described the same way Nova rela...  ...                          213          0.814940
1   Pre-requisites for building a project in bluep...  1. Have node.js 14+ and mongodb installed \n 2...  ...                           38          0.814166

[5 rows x 5 columns]
the number of tokens in the task + query is:  44
we added  16  (prompts, completions), where prompts are the most similar to the actual prompt
the number of tokens in the actual prompt is:  2710
warning: you are reaching the max allowed number of tokens since len(actual_prompt)=  10844
The first 200 characters of the actual prompt are:

Learn about blueprint: input: Initial blueprint steps:  output: 1. npm i -g i -g bluelibs/x (installs the x framework) \n
input: Create a blueprint project: output: 2. x then choose x:project (create
The last 100 characters of the actual prompt are:

s of users, products, shopping events and users balance,
and with relations between these. output:
The GPT 3 engine responds with:  
1. Create a blueprint project: x then choose x:project (creates a project using x) \n 
2. cd project npm install and npm run blueprint:generate. This creates two microservices: api, which contains MongoDB and graphQL interfaces powered by XFramework and the 
admin powered by Webpack, React and Ant Design. It will generate: Server-side: Collections \n Models \n GraphQL Types \n GraphQL CRUDs \n Queries and Mutations for CRUDs \n 
Custom GraphQL Inputs \n Subscription & Live Data Ready \n Client-side: \n UI Collections \n 
For Isomorphic Interaction with MongoDB \n CRUD Admin Pages \n Lists with Search, Pagination and Complex Filters \n Edit Forms \n Create Forms \n Easy Deletion \n
3. Create the collections for users, products, shopping events and users balance:
app({
  collections: [
    collection({
      id: "Users",
      fields: [
        field({
          id: "name",
          type: fields.types.STRING,
        }),
        field({
          id: "balance",
          type: fields.types.NUMBER,
        }),
      ],
    }),
    collection({
      id: "Products",
      fields: [
        field({
          id: "name",
          type: fields.types.STRING,
        }),
        field({
          id: "price",
          type: fields.types.NUMBER,
        }),
      ],
    }),
    collection({
      id: "ShoppingEvents",
      fields: [
        field({
          id: "name",
          type: fields.types.STRING,
        }),
        field({
          id: "date",
          type: fields.types.DATE,
        }),
      ],
    }),
    collection({
      id: "UsersBalance",
      fields: [
        field({
          id: "amount",
          type: fields.types.NUMBER,
        }),
        field({
          id: "date",
          type: fields.types.DATE,
        }),
      ],
    }),
  ],
});

4. Create the relations between the collections:
app({
  collections: [
    collection({
      id: "Users",
      fields: [],
      relations: [
        relation({
          id: "products",
          to: "Products",
          isMany: true,
        }),
        relation({
          id: "shoppingEvents",
          to: "ShoppingEvents",
          isMany: true,
        }),
        relation({
          id: "usersBalance",
          to: "UsersBalance",
          isMany: true,
        }),
      ],
    }),
    collection({
      id: "Products",
      fields: [],
      relations: [
        relation({
          id: "user",
          to: "Users",
        }),
      ],
    }),
    collection({
      id: "ShoppingEvents",
      fields: [],
      relations: [
        relation({
          id: "user",
          to: "Users",
        }),
      ],
    }),
    collection({
      id: "UsersBalance",
      fields: [],
      relations: [
        relation({
          id: "user",
          to: "Users",
        }),
      ],
    }),
  ],
});

5. Generate the project:
generateProject(application);